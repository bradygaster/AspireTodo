@page "/"
@rendermode InteractiveServer
@using Azure.Storage.Queues
@inject QueueServiceClient queueServiceClient

@inject TodoApiClient TodoClient

<PageTitle>AspireTodo</PageTitle>

<h1>Todo Items</h1>

<p>These are the things we AspireTodo.</p>

@if (todos == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var todo in todos.Where(x => !x.IsCompleted))
            {
                <tr>
                    <td>@todo.Description</td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <td>
                    <input type="text" @bind="@newTodoItemDescription" />
                    <input type="button" class="btn btn-primary" @onclick="SaveTodo" value="Save" />
                </td>
            </tr>
        </tfoot>
    </table>
}

@code {
    private TodoItem[]? todos;
    private string newTodoItemDescription = "";

    protected override async Task OnInitializedAsync()
    {
        await queueServiceClient.GetQueueClient("incoming").CreateIfNotExistsAsync();
        todos = await TodoClient.GetAllTodoItems();
    }

    private async Task SaveTodo()
    {
        if (!string.IsNullOrEmpty(newTodoItemDescription))
            await queueServiceClient.GetQueueClient("incoming").SendMessageAsync(newTodoItemDescription);
        newTodoItemDescription = "";
    }
}
